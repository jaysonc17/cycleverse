import { useState, useEffect, useCallback } from 'react';

const FITNESS_MACHINE_SERVICE = '00001826-0000-1000-8000-00805f9b34fb';
const CYCLING_POWER_SERVICE = '00001818-0000-1000-8000-00805f9b34fb';
const HEART_RATE_SERVICE = '0000180d-0000-1000-8000-00805f9b34fb';
const CYCLING_SPEED_CADENCE_SERVICE = '00001816-0000-1000-8000-00805f9b34fb';
const FITNESS_MACHINE_FEATURE = '00002acc-0000-1000-8000-00805f9b34fb';
const INDOOR_BIKE_DATA = '00002ad2-0000-1000-8000-00805f9b34fb';
const FITNESS_MACHINE_CONTROL_POINT = '00002ad9-0000-1000-8000-00805f9b34fb';
const CYCLING_POWER_MEASUREMENT = '00002a63-0000-1000-8000-00805f9b34fb';
const HEART_RATE_MEASUREMENT = '00002a37-0000-1000-8000-00805f9b34fb';

export const useBluetoothDevices = () => {
  const [devices, setDevices] = useState({ trainer: null, powerMeter: null, heartRate: null });
  const [connectionStatus, setConnectionStatus] = useState({ trainer: 'disconnected', powerMeter: 'disconnected', heartRate: 'disconnected' });
  const [sensorData, setSensorData] = useState({ power: 0, cadence: 0, speed: 0, heartRate: 0, resistance: 0 });
  const [isScanning, setIsScanning] = useState(false);
  const [error, setError] = useState(null);
  const [connectedDeviceInfo, setConnectedDeviceInfo] = useState(null);

  const isBluetoothSupported = useCallback(() => 'bluetooth' in navigator, []);

  const parseIndoorBikeData = useCallback((dataView) => {
    const flags = dataView.getUint16(0, true);
    let offset = 2;
    const data = {};
    if (flags & 0x01) { data.speed = dataView.getUint16(offset, true) * 0.01; offset += 2; }
    if (flags & 0x02) { data.averageSpeed = dataView.getUint16(offset, true) * 0.01; offset += 2; }
    if (flags & 0x04) { data.cadence = dataView.getUint16(offset, true) * 0.5; offset += 2; }
    if (flags & 0x08) { data.averageCadence = dataView.getUint16(offset, true) * 0.5; offset += 2; }
    if (flags & 0x10) { data.totalDistance = dataView.getUint32(offset, true); offset += 3; }
    if (flags & 0x20) { data.resistance = dataView.getInt16(offset, true); offset += 2; }
    if (flags & 0x40) { data.power = dataView.getInt16(offset, true); offset += 2; }
    if (flags & 0x80) { data.averagePower = dataView.getInt16(offset, true); offset += 2; }
    return data;
  }, []);

  const parseCyclingPowerData = useCallback((dataView) => {
    const flags = dataView.getUint16(0, true);
    let offset = 2;
    const data = {};
    data.power = dataView.getInt16(offset, true); offset += 2;
    if (flags & 0x01) { data.pedalPowerBalance = dataView.getUint8(offset); offset += 1; }
    if (flags & 0x04) { data.accumulatedTorque = dataView.getUint16(offset, true); offset += 2; }
    if (flags & 0x10) { data.cumulativeWheelRevolutions = dataView.getUint32(offset, true); offset += 4; data.lastWheelEventTime = dataView.getUint16(offset, true); offset += 2; data.speed = data.cumulativeWheelRevolutions * 2.1 * 3.6 / 1000; }
    if (flags & 0x20) { data.cumulativeCrankRevolutions = dataView.getUint16(offset, true); offset += 2; data.lastCrankEventTime = dataView.getUint16(offset, true); offset += 2; if (data.lastCrankEventTime && data.cumulativeCrankRevolutions) { data.cadence = Math.max(60, Math.min(120, data.power / 3)); } }
    return data;
  }, []);

  const parseHeartRateData = useCallback((dataView) => {
    const flags = dataView.getUint8(0);
    let offset = 1;
    const data = {};
    if (flags & 0x01) { data.heartRate = dataView.getUint16(offset, true); offset += 2; } else { data.heartRate = dataView.getUint8(offset); offset += 1; }
    if (flags & 0x08) { data.energyExpended = dataView.getUint16(offset, true); offset += 2; }
    if (flags & 0x10) { const rrCount = (dataView.byteLength - offset) / 2; data.rrIntervals = []; for (let i = 0; i < rrCount; i++) { data.rrIntervals.push(dataView.getUint16(offset, true)); offset += 2; } }
    return data;
  }, []);

  const connectToTrainer = useCallback(async () => {
    if (!isBluetoothSupported()) { setError('Bluetooth is not supported in this browser'); return; }
    try {
      setConnectionStatus(prev => ({ ...prev, trainer: 'connecting' }));
      setError(null);
      const device = await navigator.bluetooth.requestDevice({
        filters: [
          { services: [FITNESS_MACHINE_SERVICE] },
          { namePrefix: 'KICKR' }, { namePrefix: 'Wahoo' },
          { namePrefix: 'Tacx' }, { namePrefix: 'TACX' }, { namePrefix: 'NEO' }, { namePrefix: 'Flux' }, { namePrefix: 'Boost' }, { namePrefix: 'Flow' },
          { namePrefix: 'Elite' }, { namePrefix: 'ELITE' }, { namePrefix: 'Direto' }, { namePrefix: 'Suito' }, { namePrefix: 'Novo' }, { namePrefix: 'Tuo' },
          { namePrefix: 'Saris' }, { namePrefix: 'H3' }, { namePrefix: 'M2' }, { namePrefix: 'Magnus' },
          { namePrefix: 'Kinetic' }, { namePrefix: 'Road Machine' }, { namePrefix: 'Rock and Roll' },
          { namePrefix: 'JetBlack' }, { namePrefix: 'Volt' }, { namePrefix: 'Whirlwind' },
          { namePrefix: 'Bkool' }, { namePrefix: 'BKOOL' }, { namePrefix: 'Smart' }, { namePrefix: 'Trainer' }, { namePrefix: 'FE-C' }
        ],
        optionalServices: [CYCLING_POWER_SERVICE, HEART_RATE_SERVICE, CYCLING_SPEED_CADENCE_SERVICE]
      });
      setConnectedDeviceInfo({ name: device.name || 'Smart Trainer', id: device.id });
      const server = await device.gatt.connect();
      let service, dataCharacteristic, serviceType = '';
      try {
        service = await server.getPrimaryService(FITNESS_MACHINE_SERVICE);
        dataCharacteristic = await service.getCharacteristic(INDOOR_BIKE_DATA);
        serviceType = 'FTMS';
      } catch (ftmsError) {
        try {
          service = await server.getPrimaryService(CYCLING_POWER_SERVICE);
          dataCharacteristic = await service.getCharacteristic(CYCLING_POWER_MEASUREMENT);
          serviceType = 'CPS';
        } catch (cpsError) {
          throw new Error('No compatible cycling services found. Make sure your trainer is in pairing mode.');
        }
      }
      await dataCharacteristic.startNotifications();
      if (serviceType === 'FTMS') {
        dataCharacteristic.addEventListener('characteristicvaluechanged', (event) => {
          const data = parseIndoorBikeData(event.target.value);
          setSensorData(prev => ({ ...prev, ...data }));
        });
      } else {
        dataCharacteristic.addEventListener('characteristicvaluechanged', (event) => {
          const data = parseCyclingPowerData(event.target.value);
          setSensorData(prev => ({ ...prev, ...data }));
        });
      }
      try {
        const controlPointChar = await service.getCharacteristic(FITNESS_MACHINE_CONTROL_POINT);
        device.controlPoint = controlPointChar;
      } catch (e) { console.log('Trainer control not available'); }
      setDevices(prev => ({ ...prev, trainer: device }));
      setConnectionStatus(prev => ({ ...prev, trainer: 'connected' }));
      device.addEventListener('gattserverdisconnected', () => {
        setConnectionStatus(prev => ({ ...prev, trainer: 'disconnected' }));
        setDevices(prev => ({ ...prev, trainer: null }));
        setConnectedDeviceInfo(null);
      });
      setError(null);
    } catch (error) {
      let errorMessage = 'Failed to connect to trainer';
      if (error.message.includes('User cancelled')) errorMessage = 'Connection cancelled by user';
      else if (error.message.includes('not found') || error.message.includes('No compatible')) errorMessage = 'No compatible smart trainers found. Make sure your trainer is in pairing mode.';
      else if (error.message.includes('GATT')) errorMessage = 'Connection failed. Try turning your trainer off and on again.';
      else errorMessage = `Connection failed: ${error.message}`;
      setError(errorMessage);
      setConnectionStatus(prev => ({ ...prev, trainer: 'disconnected' }));
      setConnectedDeviceInfo(null);
    }
  }, [isBluetoothSupported, parseIndoorBikeData, parseCyclingPowerData]);

  const connectToPowerMeter = useCallback(async () => {
    if (!isBluetoothSupported()) { setError('Bluetooth is not supported in this browser'); return; }
    try {
      setConnectionStatus(prev => ({ ...prev, powerMeter: 'connecting' }));
      setError(null);
      const device = await navigator.bluetooth.requestDevice({
        filters: [{ services: [CYCLING_POWER_SERVICE] }, { namePrefix: 'Stages' }, { namePrefix: 'Quarq' }, { namePrefix: 'SRM' }, { namePrefix: 'PowerTap' }, { namePrefix: 'Pioneer' }, { namePrefix: 'Rotor' }, { namePrefix: 'Favero' }, { namePrefix: 'Garmin' }, { namePrefix: 'Shimano' }]
      });
      const server = await device.gatt.connect();
      const service = await server.getPrimaryService(CYCLING_POWER_SERVICE);
      const characteristic = await service.getCharacteristic(CYCLING_POWER_MEASUREMENT);
      await characteristic.startNotifications();
      characteristic.addEventListener('characteristicvaluechanged', (event) => {
        const data = parseCyclingPowerData(event.target.value);
        setSensorData(prev => ({ ...prev, ...data }));
      });
      setDevices(prev => ({ ...prev, powerMeter: device }));
      setConnectionStatus(prev => ({ ...prev, powerMeter: 'connected' }));
      device.addEventListener('gattserverdisconnected', () => {
        setConnectionStatus(prev => ({ ...prev, powerMeter: 'disconnected' }));
        setDevices(prev => ({ ...prev, powerMeter: null }));
      });
      setError(null);
    } catch (error) {
      setError(`Failed to connect to power meter: ${error.message}`);
      setConnectionStatus(prev => ({ ...prev, powerMeter: 'disconnected' }));
    }
  }, [isBluetoothSupported, parseCyclingPowerData]);

  const connectToHeartRate = useCallback(async () => {
    if (!isBluetoothSupported()) { setError('Bluetooth is not supported in this browser'); return; }
    try {
      setConnectionStatus(prev => ({ ...prev, heartRate: 'connecting' }));
      setError(null);
      const device = await navigator.bluetooth.requestDevice({
        filters: [{ services: [HEART_RATE_SERVICE] }, { namePrefix: 'Polar' }, { namePrefix: 'Garmin' }, { namePrefix: 'Wahoo' }, { namePrefix: 'Suunto' }, { namePrefix: 'Fitbit' }, { namePrefix: 'TICKR' }]
      });
      const server = await device.gatt.connect();
      const service = await server.getPrimaryService(HEART_RATE_SERVICE);
      const characteristic = await service.getCharacteristic(HEART_RATE_MEASUREMENT);
      await characteristic.startNotifications();
      characteristic.addEventListener('characteristicvaluechanged', (event) => {
        const data = parseHeartRateData(event.target.value);
        setSensorData(prev => ({ ...prev, ...data }));
      });
      setDevices(prev => ({ ...prev, heartRate: device }));
      setConnectionStatus(prev => ({ ...prev, heartRate: 'connected' }));
      device.addEventListener('gattserverdisconnected', () => {
        setConnectionStatus(prev => ({ ...prev, heartRate: 'disconnected' }));
        setDevices(prev => ({ ...prev, heartRate: null }));
      });
      setError(null);
    } catch (error) {
      setError(`Failed to connect to heart rate monitor: ${error.message}`);
      setConnectionStatus(prev => ({ ...prev, heartRate: 'disconnected' }));
    }
  }, [isBluetoothSupported, parseHeartRateData]);

  const setResistance = useCallback(async (resistanceLevel) => {
    const trainer = devices.trainer;
    if (!trainer || !trainer.controlPoint) { setError('No trainer with control capabilities connected'); return; }
    try {
      const command = new Uint8Array([0x04, resistanceLevel & 0xFF, (resistanceLevel >> 8) & 0xFF]);
      await trainer.controlPoint.writeValue(command);
    } catch (error) {
      setError(`Failed to set resistance: ${error.message}`);
    }
  }, [devices.trainer]);

  const setTargetPower = useCallback(async (targetPower) => {
    const trainer = devices.trainer;
    if (!trainer || !trainer.controlPoint) { setError('No trainer with control capabilities connected'); return; }
    try {
      const command = new Uint8Array([0x05, targetPower & 0xFF, (targetPower >> 8) & 0xFF]);
      await trainer.controlPoint.writeValue(command);
    } catch (error) {
      setError(`Failed to set target power: ${error.message}`);
    }
  }, [devices.trainer]);

  const disconnectDevice = useCallback(async (deviceType) => {
    const device = devices[deviceType];
    if (device && device.gatt && device.gatt.connected) {
      try { await device.gatt.disconnect(); } catch (error) { console.error(`Failed to disconnect ${deviceType}:`, error); }
    }
  }, [devices]);

  const scanForDevices = useCallback(async () => {
    if (!isBluetoothSupported()) { setError('Bluetooth is not supported in this browser'); return []; }
    setIsScanning(true);
    setError(null);
    try {
      const device = await navigator.bluetooth.requestDevice({
        acceptAllDevices: true,
        optionalServices: [FITNESS_MACHINE_SERVICE, CYCLING_POWER_SERVICE, HEART_RATE_SERVICE, CYCLING_SPEED_CADENCE_SERVICE]
      });
      return [device];
    } catch (error) {
      if (!error.message.includes('User cancelled')) { setError(`Scan failed: ${error.message}`); }
      return [];
    } finally {
      setIsScanning(false);
    }
  }, [isBluetoothSupported]);

  return {
    devices, connectionStatus, sensorData, isScanning, error, connectedDeviceInfo,
    isBluetoothSupported: isBluetoothSupported(), connectToTrainer, connectToPowerMeter,
    connectToHeartRate, disconnectDevice, scanForDevices, setResistance, setTargetPower
  };
};
